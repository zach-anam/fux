{"version":3,"file":"shim-label-activation.js","sourceRoot":"","sources":["shim-label-activation.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAC,gBAAgB,EAAC,MAAM,sBAAsB,CAAC;AAEtD,4EAA4E;AAC5E,0CAA0C;AAE1C;;;;GAIG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAC5B,QAAQ,IAAI,CAAC,UAAU,EAAE,gBAAgB,EAAE,SAAS,IAAI,EAAE,CAAC,CAAC;AAEhE,SAAS,eAAe,CAAC,OAAoB;IAC3C,OAAO,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACtC,CAAC;AAED,2EAA2E;AAC3E,8EAA8E;AAC9E,kBAAkB;AAClB,MAAM,qBAAqB,GAAG,IAAI,GAAG,CACjC,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;AAE9E,SAAS,eAAe,CAAC,OAAoB;IAC3C,OAAO,qBAAqB,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC;QAC/C,gBAAgB,CAAC,OAAO,CAAC,CAAC;AAChC,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,gBAAgB,CAAC,IAAyB;IACxD,6DAA6D;IAC7D,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,uBAAuB,CAAC,CAAC;AAC1D,CAAC;AAED,SAAS,uBAAuB,CAAC,KAAY;IAC3C,oCAAoC;IACpC,MAAM,IAAI,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;IAClC,MAAM,IAAI,GAAG,KAAK,CAAC,aAAsC,CAAC;IAC1D,IAAI,KAAK,GAA+B,SAAS,CAAC;IAClD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACpC,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAgB,CAAC;QACtC,+BAA+B;QAC/B,IAAI,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY;YACrC,MAAM,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YACjC,SAAS;SACV;QACD,0EAA0E;QAC1E,IAAI,eAAe,CAAC,MAAM,CAAC,EAAE;YAC3B,OAAO;SACR;QACD,IAAI,MAAM,CAAC,SAAS,KAAK,OAAO,EAAE;YAChC,KAAK,GAAG,MAA0B,CAAC;SACpC;KACF;IACD,IAAI,KAAK,KAAK,SAAS,EAAE;QACvB,OAAO;KACR;IACD,uCAAuC;IACvC,MAAM,KAAK,GAAG,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IACxC,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC;QAClB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5B,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAc,GAAG,CAAC,CAAC;aAC/C,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,IAAI,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;IACnE,IAAI,MAAM,IAAI,IAAI,EAAE;QAClB,OAAO;KACR;IACD,8DAA8D;IAC9D,MAAM,cAAc,GAChB,IAAI,YAAY,CAAC,OAAO,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;IAC/D,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;AACvC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {isFormAssociated} from './form-associated.js';\n\n// TODO Label activation shim is currently only needed for Safari. Remove it\n// when no longer needed, see b/261871554.\n\n/**\n * Returns true if labeling is supported for form associated custom elemeents.\n * Chrome and Firefox currently do and Safari support appears to be in progress,\n * see https://bugs.webkit.org/show_bug.cgi?id=197960.\n */\nexport const SUPPORTS_FACE_LABEL =\n    'labels' in (globalThis?.ElementInternals?.prototype ?? {});\n\nfunction isCustomElement(element: HTMLElement) {\n  return element.localName.match('-');\n}\n\n// Elements that can be associated with a <label> element include <button>,\n// <input> (except for type=\"hidden\"), <meter>, <output>, <progress>, <select>\n// and <textarea>.\nconst implicitLabelReactive = new Set(\n    ['button', 'input', 'meter', 'progress', 'output', 'select', 'textarea']);\n\nfunction isLabelReactive(element: HTMLElement) {\n  return implicitLabelReactive.has(element.localName) ||\n      isFormAssociated(element);\n}\n\n/**\n * Provides a shim for labeling form associated custom elements via clicks\n * on label elements. Note, this is currently needed only in Safari and\n * support appears to be in progress, see\n * https://bugs.webkit.org/show_bug.cgi?id=197960.\n */\nexport function shimLabelSupport(root: Document|ShadowRoot) {\n  // Listen for clicks on root to find clicks on label elements\n  root.addEventListener('click', labelActivationListener);\n}\n\nfunction labelActivationListener(event: Event) {\n  // Find label on which user clicked.\n  const path = event.composedPath();\n  const root = event.currentTarget as ShadowRoot | Document;\n  let label: HTMLLabelElement|undefined = undefined;\n  for (let i = 0; i < path.length; i++) {\n    const target = path[i] as HTMLElement;\n    // Not element or not in scope.\n    if (target.nodeType !== Node.ELEMENT_NODE ||\n        target.getRootNode() !== root) {\n      continue;\n    }\n    // If the click is on a label reactive element, this is not a label click.\n    if (isLabelReactive(target)) {\n      return;\n    }\n    if (target.localName === 'label') {\n      label = target as HTMLLabelElement;\n    }\n  }\n  if (label === undefined) {\n    return;\n  }\n  // Find associated element to activate.\n  const forId = label.getAttribute('for');\n  const target = forId ?\n      root.getElementById(forId) :\n      Array.from(label.querySelectorAll<HTMLElement>('*'))\n          .find((el) => isCustomElement(el) && isFormAssociated(el));\n  if (target == null) {\n    return;\n  }\n  // Simulate FACE by issuing a click on the associated element.\n  const simulatedClick =\n      new PointerEvent('click', {composed: true, bubbles: true});\n  target.dispatchEvent(simulatedClick);\n}\n"]}