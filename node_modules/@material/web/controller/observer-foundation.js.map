{"version":3,"file":"observer-foundation.js","sourceRoot":"","sources":["observer-foundation.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAC,UAAU,EAAC,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EAAC,eAAe,EAAiB,MAAM,eAAe,CAAC;AAE9D;;GAEG;AACH,MAAM,OAAO,kBAA2C,SACpD,UAAmB;IACrB;;;;;;;;;;;OAWG;IACO,OAAO,CACb,MAAS,EAAE,SAAkC;QAC/C,MAAM,OAAO,GAAe,EAAE,CAAC;QAC/B,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAmB,EAAE;YAC/D,MAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjD,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;SAC3D;QAED,OAAO,GAAG,EAAE;YACV,KAAK,MAAM,SAAS,IAAI,OAAO,EAAE;gBAC/B,SAAS,EAAE,CAAC;aACb;QACH,CAAC,CAAC;IACJ,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {Foundation} from './foundation.js';\nimport {observeProperty, ObserverRecord} from './observer.js';\n\n/**\n * Legacy observer foundation class for components.\n */\nexport class ObserverFoundation<Adapter extends object> extends\n    Foundation<Adapter> {\n  /**\n   * Observe a target's properties for changes using the provided map of\n   * property names and observer functions.\n   *\n   * @template T The target type.\n   * @param target - The target to observe.\n   * @param observers - An object whose keys are target properties and values\n   *     are observer functions that are called when the associated property\n   *     changes.\n   * @return A cleanup function that can be called to unobserve the\n   *     target.\n   */\n  protected observe<T extends object>(\n      target: T, observers: ObserverRecord<T, this>) {\n    const cleanup: Function[] = [];\n    for (const property of Object.keys(observers) as Array<keyof T>) {\n      const observer = observers[property]!.bind(this);\n      cleanup.push(observeProperty(target, property, observer));\n    }\n\n    return () => {\n      for (const cleanupFn of cleanup) {\n        cleanupFn();\n      }\n    };\n  }\n}\n"]}