{"version":3,"file":"text-field.js","sourceRoot":"","sources":["text-field.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {html, LitElement, PropertyValues, TemplateResult} from 'lit';\nimport {property, query, queryAssignedElements, state} from 'lit/decorators.js';\nimport {ClassInfo, classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {live} from 'lit/directives/live.js';\nimport {styleMap} from 'lit/directives/style-map.js';\nimport {html as staticHtml, StaticValue} from 'lit/static-html.js';\n\nimport {redispatchEvent} from '../../controller/events.js';\nimport {FormController, getFormValue} from '../../controller/form-controller.js';\nimport {stringConverter} from '../../controller/string-converter.js';\nimport {ariaProperty} from '../../decorators/aria-property.js';\nimport {ARIAAutoComplete, ARIAExpanded, ARIARole} from '../../types/aria.js';\n\n/**\n * Input types that are compatible with the text field.\n */\nexport type TextFieldType =\n    'email'|'number'|'password'|'search'|'tel'|'text'|'url';\n\n/**\n * Input types that are not fully supported for the text field.\n */\nexport type UnsupportedTextFieldType =\n    'color'|'date'|'datetime-local'|'file'|'month'|'time'|'week';\n\n/**\n * Input types that are incompatible with the text field.\n */\nexport type InvalidTextFieldType =\n    'button'|'checkbox'|'hidden'|'image'|'radio'|'range'|'reset'|'submit';\n\n/** @soyCompatible */\nexport abstract class TextField extends LitElement {\n  static override shadowRootOptions:\n      ShadowRootInit = {mode: 'open', delegatesFocus: true};\n\n  @property({type: Boolean, reflect: true}) disabled = false;\n  /**\n   * Gets or sets whether or not the text field is in a visually invalid state.\n   *\n   * Calling `reportValidity()` will automatically update `error`.\n   */\n  @property({type: Boolean, reflect: true}) error = false;\n  /**\n   * The error message that replaces supporting text when `error` is true. If\n   * `errorText` is an empty string, then the supporting text will continue to\n   * show.\n   *\n   * Calling `reportValidity()` will automatically update `errorText` to the\n   * native `validationMessage`.\n   */\n  @property({type: String}) errorText = '';\n  @property({type: String}) label?: string;\n  @property({type: Boolean, reflect: true}) required = false;\n  /**\n   * The current value of the text field. It is always a string.\n   *\n   * This is equal to `defaultValue` before user input.\n   */\n  @property({type: String}) value = '';\n  /**\n   * The default value of the text field. Before user input, changing the\n   * default value will update `value` as well.\n   *\n   * When the text field is reset, its `value` will be set to this default\n   * value.\n   */\n  @property({type: String}) defaultValue = '';\n  /**\n   * An optional prefix to display before the input value.\n   */\n  @property({type: String}) prefixText = '';\n  /**\n   * An optional suffix to display after the input value.\n   */\n  @property({type: String}) suffixText = '';\n  /**\n   * Whether or not the text field has a leading icon. Used for SSR.\n   */\n  @property({type: Boolean}) hasLeadingIcon = false;\n  /**\n   * Whether or not the text field has a trailing icon. Used for SSR.\n   */\n  @property({type: Boolean}) hasTrailingIcon = false;\n  /**\n   * Conveys additional information below the text field, such as how it should\n   * be used.\n   */\n  @property({type: String}) supportingText = '';\n  /**\n   * Override the input text CSS `direction`. Useful for RTL languages that use\n   * LTR notation for fractions.\n   */\n  @property({type: String}) textDirection = '';\n\n  // ARIA\n  // TODO(b/210730484): replace with @soyParam annotation\n  @property(\n      {type: String, attribute: 'data-aria-autocomplete', noAccessor: true})\n  @ariaProperty  // tslint:disable-line:no-new-decorators\n  override ariaAutoComplete: ARIAAutoComplete|null = null;\n\n  @property({type: String, attribute: 'data-aria-controls', noAccessor: true})\n  @ariaProperty  // tslint:disable-line:no-new-decorators\n  ariaControls: string|null = null;\n\n  @property(\n      {type: String, attribute: 'data-aria-activedescendant', noAccessor: true})\n  @ariaProperty  // tslint:disable-line:no-new-decorators\n  ariaActiveDescendant: string|null = null;\n\n  @property({type: String, attribute: 'data-aria-expanded', noAccessor: true})\n  @ariaProperty  // tslint:disable-line:no-new-decorators\n  override ariaExpanded: ARIAExpanded|null = null;\n\n  /**\n   * The `aria-label` of the text field's input.\n   */\n  @property({type: String, attribute: 'data-aria-label', noAccessor: true})\n  @ariaProperty  // tslint:disable-line:no-new-decorators\n  override ariaLabel!: string;\n\n  /**\n   * The `aria-labelledby` of the text field's input.\n   *\n   * Note: currently only usable in SSR light DOM.\n   */\n  @property({type: String, attribute: 'data-aria-labelledby', noAccessor: true})\n  @ariaProperty  // tslint:disable-line:no-new-decorators\n  ariaLabelledBy!: string;\n\n  // tslint:disable:decorator-placement\n  @property({type: String, attribute: 'data-role', noAccessor: true})\n  @ariaProperty  // tslint:disable-line:no-new-decorators\n  // @ts-ignore(b/264292293): Use `override` with TS 4.9+\n  role: ARIARole|null = null;\n  // tslint:enable:decorator-placement\n\n  // FormElement\n  get form() {\n    return this.closest('form');\n  }\n\n  @property({type: String, reflect: true, converter: stringConverter})\n  name = '';\n\n  [getFormValue]() {\n    return this.value;\n  }\n\n  // <input> properties\n  /**\n   * Defines the greatest value in the range of permitted values.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max\n   */\n  @property({type: String}) max = '';\n  /**\n   * The maximum number of characters a user can enter into the text field. Set\n   * to -1 for none.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength\n   */\n  @property({type: Number}) maxLength = -1;\n  /**\n   * Defines the most negative value in the range of permitted values.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min\n   */\n  @property({type: String}) min = '';\n  /**\n   * The minimum number of characters a user can enter into the text field. Set\n   * to -1 for none.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength\n   */\n  @property({type: Number}) minLength = -1;\n  /**\n   * A regular expression that the text field's value must match to pass\n   * constraint validation.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#pattern\n   */\n  @property({type: String}) pattern = '';\n  @property({type: String, reflect: true, converter: stringConverter})\n  placeholder = '';\n\n  /**\n   * Indicates whether or not a user should be able to edit the text field's\n   * value.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#readonly\n   */\n  @property({type: Boolean, reflect: true}) readOnly = false;\n\n  /**\n   * Gets or sets the direction in which selection occurred.\n   */\n  get selectionDirection() {\n    return this.getInput().selectionDirection;\n  }\n  set selectionDirection(value: 'forward'|'backward'|'none'|null) {\n    this.getInput().selectionDirection = value;\n  }\n\n  /**\n   * Gets or sets the end position or offset of a text selection.\n   */\n  get selectionEnd() {\n    return this.getInput().selectionEnd;\n  }\n  set selectionEnd(value: number|null) {\n    this.getInput().selectionEnd = value;\n  }\n\n  /**\n   * Gets or sets the starting position or offset of a text selection.\n   */\n  get selectionStart() {\n    return this.getInput().selectionStart;\n  }\n  set selectionStart(value: number|null) {\n    this.getInput().selectionStart = value;\n  }\n\n  /**\n   * Returns or sets the element's step attribute, which works with min and max\n   * to limit the increments at which a numeric or date-time value can be set.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step\n   */\n  @property({type: String}) step = '';\n\n  // TODO(b/237284412): replace with exported types\n  @property({type: String, reflect: true})\n  type: 'email'|'number'|'password'|'search'|'tel'|'text'|'url'|'color'|'date'|\n      'datetime-local'|'file'|'month'|'time'|'week' = 'text';\n\n  /**\n   * Returns the native validation error message that would be displayed upon\n   * calling `reportValidity()`.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/validationMessage\n   */\n  get validationMessage() {\n    return this.getInput().validationMessage;\n  }\n\n  /**\n   * Returns a ValidityState object that represents the validity states of the\n   * text field.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/validity\n   */\n  get validity() {\n    return this.getInput().validity;\n  }\n\n  /**\n   * The text field's value as a number.\n   */\n  get valueAsNumber() {\n    return this.getInput().valueAsNumber;\n  }\n  set valueAsNumber(value: number) {\n    this.getInput().valueAsNumber = value;\n    this.value = this.getInput().value;\n  }\n\n  /**\n   * The text field's value as a Date.\n   */\n  get valueAsDate() {\n    return this.getInput().valueAsDate;\n  }\n  set valueAsDate(value: Date|null) {\n    this.getInput().valueAsDate = value;\n    this.value = this.getInput().value;\n  }\n\n  /**\n   * Returns whether an element will successfully validate based on forms\n   * validation rules and constraints.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/willValidate\n   */\n  get willValidate() {\n    return this.getInput().willValidate;\n  }\n\n  /**\n   * Returns true when the text field has been interacted with. Native\n   * validation errors only display in response to user interactions.\n   */\n  @state() protected dirty = false;\n  @state() protected focused = false;\n  /**\n   * When set to true, the error text's `role=\"alert\"` will be removed, then\n   * re-added after an animation frame. This will re-announce an error message\n   * to screen readers.\n   */\n  @state() protected refreshErrorAlert = false;\n  /**\n   * Returns true when the text field's `value` property has been changed from\n   * it's initial value.\n   *\n   * Setting `value` should always overwrite `defaultValue`, even when `value`\n   * is an empty string. This flag ensures that behavior.\n   */\n  @state() protected valueHasChanged = false;\n  /**\n   * Whether or not to ignore the next `value` change when computing\n   * `valueHasChanged`.\n   */\n  protected ignoreNextValueChange = false;\n  /**\n   * Whether or not a native error has been reported via `reportValidity()`.\n   */\n  @state() protected nativeError = false;\n  /**\n   * The validation message displayed from a native error via\n   * `reportValidity()`.\n   */\n  @state() protected nativeErrorText = '';\n  @query('.md3-text-field__input')\n  protected readonly input?: HTMLInputElement|null;\n  protected abstract readonly fieldTag: StaticValue;\n\n  /** @soyUniqueAttribute */\n  private readonly counterId = 'counter';\n  @queryAssignedElements({slot: 'leadingicon'})\n  private readonly leadingIcons!: Element[];\n  @queryAssignedElements({slot: 'trailingicon'})\n  private readonly trailingIcons!: Element[];\n  /** @soyUniqueAttribute */\n  private readonly supportingTextId = 'support';\n\n  constructor() {\n    super();\n    this.addController(new FormController(this));\n    // TODO(b/244574653): replace this.handleClick with this.focus\n    this.addEventListener('click', this.handleClick);\n    this.addEventListener('focusin', this.handleFocusin);\n    this.addEventListener('focusout', this.handleFocusout);\n  }\n\n  /**\n   * Checks the text field's native validation and returns whether or not the\n   * element is valid.\n   *\n   * If invalid, this method will dispatch the `invalid` event.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/checkValidity\n   *\n   * @return true if the text field is valid, or false if not.\n   */\n  checkValidity() {\n    const {valid} = this.checkValidityAndDispatch();\n    return valid;\n  }\n\n  /**\n   * Focuses the text field's input text.\n   */\n  override focus() {\n    if (this.disabled || this.matches(':focus-within')) {\n      // Don't shift focus from an element within the text field, like an icon\n      // button, to the input when focus is requested.\n      return;\n    }\n\n    // TODO(b/210731759): replace with super.focus() once SSR supports\n    // delegating focus\n    this.getInput().focus();\n  }\n\n  /**\n   * Unfocuses the text field.\n   */\n  override blur() {\n    this.getInput().blur();\n  }\n\n  /**\n   * Checks the text field's native validation and returns whether or not the\n   * element is valid.\n   *\n   * If invalid, this method will dispatch the `invalid` event.\n   *\n   * This method will display or clear an error text message equal to the text\n   * field's `validationMessage`, unless the invalid event is canceled.\n   *\n   * Use `setCustomValidity()` to customize the `validationMessage`.\n   *\n   * This method can also be used to re-announce error messages to screen\n   * readers.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/reportValidity\n   *\n   * @return true if the text field is valid, or false if not.\n   */\n  reportValidity() {\n    const {valid, canceled} = this.checkValidityAndDispatch();\n    if (!canceled) {\n      const prevMessage = this.getErrorText();\n      this.nativeError = !valid;\n      this.nativeErrorText = this.validationMessage;\n\n      const needsRefresh =\n          this.shouldErrorAnnounce() && prevMessage === this.getErrorText();\n      if (needsRefresh) {\n        this.refreshErrorAlert = true;\n      }\n    }\n\n    return valid;\n  }\n\n  /**\n   * Selects all the text in the text field.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select\n   */\n  select() {\n    this.getInput().select();\n  }\n\n  /**\n   * Sets the text field's native validation error message. This is used to\n   * customize `validationMessage`.\n   *\n   * When the error is not an empty string, the text field is considered invalid\n   * and `validity.customError` will be true.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setCustomValidity\n   *\n   * @param error The error message to display.\n   */\n  setCustomValidity(error: string) {\n    this.getInput().setCustomValidity(error);\n  }\n\n  /**\n   * Replaces a range of text with a new string.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setRangeText\n   */\n  setRangeText(replacement: string): void;\n  setRangeText(\n      replacement: string, start: number, end: number,\n      selectionMode?: SelectionMode): void;\n  setRangeText(...args: unknown[]) {\n    // Calling setRangeText with 1 vs 3-4 arguments has different behavior.\n    // Use spread syntax and type casting to ensure correct usage.\n    this.getInput().setRangeText(\n        ...args as Parameters<HTMLInputElement['setRangeText']>);\n    this.value = this.getInput().value;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in the text field.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange\n   *\n   * @param start The offset into the text field for the start of the selection.\n   * @param end The offset into the text field for the end of the selection.\n   * @param direction The direction in which the selection is performed.\n   */\n  setSelectionRange(\n      start: number|null, end: number|null,\n      direction?: 'forward'|'backward'|'none') {\n    this.getInput().setSelectionRange(start, end, direction);\n  }\n\n  /**\n   * Decrements the value of a numeric type text field by `step` or `n` `step`\n   * number of times.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepDown\n   *\n   * @param stepDecrement The number of steps to decrement, defaults to 1.\n   */\n  stepDown(stepDecrement?: number) {\n    const input = this.getInput();\n    input.stepDown(stepDecrement);\n    this.value = input.value;\n  }\n\n  /**\n   * Increments the value of a numeric type text field by `step` or `n` `step`\n   * number of times.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepUp\n   *\n   * @param stepIncrement The number of steps to increment, defaults to 1.\n   */\n  stepUp(stepIncrement?: number) {\n    const input = this.getInput();\n    input.stepUp(stepIncrement);\n    this.value = input.value;\n  }\n\n  /**\n   * Reset the text field to its default value.\n   */\n  reset() {\n    this.dirty = false;\n    this.valueHasChanged = false;\n    this.ignoreNextValueChange = true;\n    this.value = this.defaultValue;\n    this.nativeError = false;\n    this.nativeErrorText = '';\n  }\n\n  /** @soyTemplate */\n  override render(): TemplateResult {\n    return html`\n       <span class=\"md3-text-field ${classMap(this.getRenderClasses())}\">\n         ${this.renderField()}\n       </span>\n     `;\n  }\n\n  /** @soyTemplate */\n  protected getRenderClasses(): ClassInfo {\n    return {\n      'md3-text-field--disabled': this.disabled,\n      'md3-text-field--error': this.getError(),\n    };\n  }\n\n  /** @soyTemplate */\n  protected getError(): boolean {\n    return this.error || this.nativeError;\n  }\n\n  /** @soyTemplate */\n  protected renderField(): TemplateResult {\n    const prefix = this.renderPrefix();\n    const suffix = this.renderSuffix();\n    const input = this.renderInput();\n    const inputValue = this.getInputValue();\n\n    return staticHtml`<${this.fieldTag}\n      class=\"md3-text-field__field\"\n      ?disabled=${this.disabled}\n      ?error=${this.getError()}\n      ?focused=${this.focused}\n      ?hasEnd=${this.hasTrailingIcon}\n      ?hasStart=${this.hasLeadingIcon}\n      .label=${this.label}\n      ?populated=${!!inputValue}\n      ?required=${this.required}\n    >\n      ${this.renderLeadingIcon()}\n      ${prefix}${input}${suffix}\n      ${this.renderTrailingIcon()}\n      ${this.renderSupportingText()}\n      ${this.renderCounter()}\n    </${this.fieldTag}>`;\n  }\n\n  /**\n   * @soyTemplate\n   * @slotName start\n   */\n  protected renderLeadingIcon(): TemplateResult {\n    return html`\n       <span class=\"md3-text-field__icon md3-text-field__icon--leading\"\n           slot=\"start\">\n         <slot name=\"leadingicon\" @slotchange=${this.handleIconChange}></slot>\n       </span>\n     `;\n  }\n\n  /**\n   * @soyTemplate\n   * @slotName end\n   */\n  protected renderTrailingIcon(): TemplateResult {\n    return html`\n       <span class=\"md3-text-field__icon md3-text-field__icon--trailing\"\n           slot=\"end\">\n         <slot name=\"trailingicon\" @slotchange=${this.handleIconChange}></slot>\n       </span>\n     `;\n  }\n\n  /** @soyTemplate */\n  protected renderInput(): TemplateResult {\n    // TODO(b/237283903): remove when custom isTruthy directive is supported\n    const placeholderValue = this.placeholder || undefined;\n    const ariaActiveDescendantValue = this.ariaActiveDescendant || undefined;\n    const ariaAutoCompleteValue = this.ariaAutoComplete || undefined;\n    const ariaControlsValue = this.ariaControls || undefined;\n    const ariaDescribedByValue = this.getAriaDescribedBy() || undefined;\n    const ariaExpandedValue = this.ariaExpanded || undefined;\n    const ariaLabelValue = this.ariaLabel || this.label || undefined;\n    const ariaLabelledByValue = this.ariaLabelledBy || undefined;\n    const maxValue = this.max || undefined;\n    const maxLengthValue = this.maxLength > -1 ? this.maxLength : undefined;\n    const minValue = this.min || undefined;\n    const minLengthValue = this.minLength > -1 ? this.minLength : undefined;\n    const patternValue = this.pattern || undefined;\n    const roleValue = this.role || undefined;\n    const stepValue = this.step || undefined;\n\n    /** @styleMap */\n    const style = {direction: this.textDirection};\n\n    // TODO(b/243805848): remove `as unknown as number` once lit analyzer is\n    // fixed\n    return html`<input\n       class=\"md3-text-field__input\"\n       style=${styleMap(style)}\n       aria-activedescendant=${ifDefined(ariaActiveDescendantValue)}\n       aria-autocomplete=${ifDefined(ariaAutoCompleteValue)}\n       aria-controls=${ifDefined(ariaControlsValue)}\n       aria-describedby=${ifDefined(ariaDescribedByValue)}\n       aria-expanded=${ifDefined(ariaExpandedValue)}\n       aria-invalid=${this.getError()}\n       aria-label=${ifDefined(ariaLabelValue)}\n       aria-labelledby=${ifDefined(ariaLabelledByValue)}\n       ?disabled=${this.disabled}\n       max=${ifDefined(maxValue as unknown as number)}\n       maxlength=${ifDefined(maxLengthValue)}\n       min=${ifDefined(minValue as unknown as number)}\n       minlength=${ifDefined(minLengthValue)}\n       pattern=${ifDefined(patternValue)}\n       placeholder=${ifDefined(placeholderValue)}\n       role=${ifDefined(roleValue)}\n       ?readonly=${this.readOnly}\n       ?required=${this.required}\n       step=${ifDefined(stepValue as unknown as number)}\n       type=${this.type}\n       .value=${live(this.getInputValue())}\n       @change=${this.redispatchEvent}\n       @input=${this.handleInput}\n       @select=${this.redispatchEvent}\n     >`;\n  }\n\n  /** @soyTemplate */\n  protected getInputValue(): string {\n    const alwaysShowValue = this.dirty || this.valueHasChanged;\n    return alwaysShowValue ? this.value : this.defaultValue || this.value;\n  }\n\n  /** @soyTemplate */\n  protected getAriaDescribedBy(): string {\n    const hasSupport = !!this.getSupportingText();\n    const hasCounter = this.hasCounter();\n    // TODO(b/244609052): remove parens\n    return (hasSupport || hasCounter) ?\n        `${hasSupport ? this.supportingTextId : ''} ${\n            hasCounter ? this.counterId : ''}` :\n        '';\n  }\n\n  /** @soyTemplate */\n  protected renderPrefix(): TemplateResult {\n    return this.prefixText ?\n        html`<span class=\"md3-text-field__prefix\">${this.prefixText}</span>` :\n        html``;\n\n    // TODO(b/217441842): Create shared function once argument bug is fixed\n    // return this.renderAffix(/* isSuffix */ false);\n  }\n\n  /** @soyTemplate */\n  protected renderSuffix(): TemplateResult {\n    return this.suffixText ?\n        html`<span class=\"md3-text-field__suffix\">${this.suffixText}</span>` :\n        html``;\n\n    // TODO(b/217441842): Create shared function once argument bug is fixed\n    // return this.renderAffix(/* isSuffix */ true);\n  }\n\n  /**\n   * @soyTemplate\n   * @slotName supporting-text\n   */\n  protected renderSupportingText(): TemplateResult {\n    const shouldAlert = this.shouldErrorAnnounce();\n    const text = this.getSupportingText();\n    const template = html`<span id=${this.supportingTextId} \n      slot=\"supporting-text\" \n      role=${ifDefined(shouldAlert ? 'alert' : undefined)}>${text}</span>`;\n\n    return text ? template : html``;\n  }\n\n  /** @soyTemplate */\n  protected getSupportingText(): string {\n    const errorText = this.getErrorText();\n    return this.getError() && errorText ? errorText : this.supportingText;\n  }\n\n  /** @soyTemplate */\n  protected getErrorText(): string {\n    return this.error ? this.errorText : this.nativeErrorText;\n  }\n\n  /** @soyTemplate */\n  protected shouldErrorAnnounce(): boolean {\n    // Announce if there is an error and error text visible.\n    // If refreshErrorAlert is true, do not announce. This will remove the\n    // role=\"alert\" attribute. Another render cycle will happen after an\n    // animation frame to re-add the role.\n    return this.getError() && !!this.getErrorText() && !this.refreshErrorAlert;\n  }\n\n  /**\n   * @soyTemplate\n   * @slotName supporting-text-end\n   */\n  protected renderCounter(): TemplateResult {\n    const counter = html`<span id=${this.counterId}\n       class=\"md3-text-field__counter\"\n       slot=\"supporting-text-end\">${this.getCounterText()}</span>`;\n    // TODO(b/244473435): add aria-label and announcements\n    return this.hasCounter() ? counter : html``;\n  }\n\n  // TODO(b/244197198): replace with !!this.getCounterText()\n  /** @soyTemplate */\n  protected hasCounter(): boolean {\n    return this.maxLength > -1;\n  }\n\n  /** @soyTemplate */\n  protected getCounterText(): TemplateResult {\n    // TODO(b/244197198): replace with string return\n    const length = this.value.length;\n    return this.hasCounter() ? html`${length} / ${this.maxLength}` : html``;\n  }\n\n  protected override update(changedProperties: PropertyValues<TextField>) {\n    // Consider a value change anything that is not the initial empty string\n    // value.\n    const valueHasChanged = changedProperties.has('value') &&\n        changedProperties.get('value') !== undefined;\n    if (valueHasChanged && !this.ignoreNextValueChange) {\n      this.valueHasChanged = true;\n    }\n\n    if (this.ignoreNextValueChange) {\n      this.ignoreNextValueChange = false;\n    }\n\n    super.update(changedProperties);\n  }\n\n  protected override updated(changedProperties: PropertyValues) {\n    // If a property such as `type` changes and causes the internal <input>\n    // value to change without dispatching an event, re-sync it.\n    const value = this.getInput().value;\n    if (this.value !== value) {\n      // Don't consider these updates (such as setting `defaultValue`) as\n      // the developer directly changing the `value`.\n      this.ignoreNextValueChange = true;\n      // Note this is typically inefficient in updated() since it schedules\n      // another update. However, it is needed for the <input> to fully render\n      // before checking its value.\n      this.value = value;\n    }\n\n    if (this.refreshErrorAlert) {\n      // The past render cycle removed the role=\"alert\" from the error message.\n      // Re-add it after an animation frame to re-announce the error.\n      requestAnimationFrame(() => {\n        this.refreshErrorAlert = false;\n      });\n    }\n  }\n\n  /** @bubbleWizEvent */\n  protected handleClick() {\n    this.focus();\n  }\n\n  /** @bubbleWizEvent */\n  protected handleFocusin(event: FocusEvent) {\n    this.focused = true;\n  }\n\n  /** @bubbleWizEvent */\n  protected handleFocusout(event: FocusEvent) {\n    if (this.matches(':focus-within')) {\n      // Changing focus to another child within the text field, like a button\n      return;\n    }\n\n    this.focused = false;\n  }\n\n  protected handleInput(event: InputEvent) {\n    this.dirty = true;\n    this.value = (event.target as HTMLInputElement).value;\n    this.redispatchEvent(event);\n  }\n\n  protected redispatchEvent(event: Event) {\n    redispatchEvent(this, event);\n  }\n\n  protected getInput() {\n    if (!this.input) {\n      // If the input is not yet defined, synchronously render.\n      // e.g.\n      // const textField = document.createElement('md-outlined-text-field');\n      // document.body.appendChild(textField);\n      // textField.focus(); // synchronously render\n      this.connectedCallback();\n      this.scheduleUpdate();\n    }\n\n    if (this.isUpdatePending) {\n      // If there are pending updates, synchronously perform them. This ensures\n      // that constraint validation properties (like `required`) are synced\n      // before interacting with input APIs that depend on them.\n      this.scheduleUpdate();\n    }\n\n    return this.input!;\n  }\n\n  private checkValidityAndDispatch() {\n    const valid = this.getInput().checkValidity();\n    let canceled = false;\n    if (!valid) {\n      canceled = !this.dispatchEvent(new Event('invalid', {cancelable: true}));\n    }\n\n    return {valid, canceled};\n  }\n\n  private handleIconChange() {\n    this.hasLeadingIcon = this.leadingIcons.length > 0;\n    this.hasTrailingIcon = this.trailingIcons.length > 0;\n  }\n}\n"]}