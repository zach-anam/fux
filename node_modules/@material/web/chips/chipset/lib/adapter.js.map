{"version":3,"file":"adapter.js","sourceRoot":"","sources":["adapter.ts"],"names":[],"mappings":"AAAA;;;;GAIG","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {MDCChipActionFocusBehavior, MDCChipActionType} from '../../action/lib/constants.js';\nimport {MDCChipAnimation} from '../../chip/lib/constants.js';\n\nimport {MDCChipSetAttributes, MDCChipSetEvents} from './constants.js';\n\n/**\n * Defines the shape of the adapter expected by the foundation.\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n */\nexport interface MDCChipSetAdapter {\n  /** Announces the message via an aria-live region */\n  announceMessage(message: string): void;\n\n  /** Emits the given event with the given detail. */\n  emitEvent<D extends object>(eventName: MDCChipSetEvents, eventDetail: D):\n      void;\n\n  /** Returns the value for the given attribute, if it exists. */\n  getAttribute(attrName: MDCChipSetAttributes): string|null;\n\n  /** Returns the actions provided by the child chip at the given index. */\n  getChipActionsAtIndex(index: number): MDCChipActionType[];\n\n  /** Returns the number of child chips. */\n  getChipCount(): number;\n\n  /** Returns the ID of the chip at the given index. */\n  getChipIdAtIndex(index: number): string;\n\n  /** Returns the index of the child chip with the matching ID. */\n  getChipIndexById(chipID: string): number;\n\n  /** Proxies to the MDCChip#isActionFocusable method. */\n  isChipFocusableAtIndex(index: number, actionType: MDCChipActionType): boolean;\n\n  /** Proxies to the MDCChip#isActionSelectable method. */\n  isChipSelectableAtIndex(index: number, actionType: MDCChipActionType):\n      boolean;\n\n  /** Proxies to the MDCChip#isActionSelected method. */\n  isChipSelectedAtIndex(index: number, actionType: MDCChipActionType): boolean;\n\n  /** Removes the chip at the given index. */\n  removeChipAtIndex(index: number): void;\n\n  /** Proxies to the MDCChip#setActionFocus method. */\n  setChipFocusAtIndex(\n      index: number, action: MDCChipActionType,\n      focus: MDCChipActionFocusBehavior): void;\n\n  /** Proxies to the MDCChip#setActionSelected method. */\n  setChipSelectedAtIndex(\n      index: number, actionType: MDCChipActionType, isSelected: boolean): void;\n\n  /** Starts the chip animation at the given index. */\n  startChipAnimationAtIndex(index: number, animation: MDCChipAnimation): void;\n}\n"]}