//
// Copyright 2022 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

@use 'sass:map';
@use '../tokens';
@use './color';
@use './theme';
@use './var';

// TODO(b/213571555): Following Sass mixins will call color scheme APIs which
// are generated using tokens compiler when ready.

/// Declares set of CSS custom properties for baseline dark color scheme
/// overrides.
@mixin dark-color-scheme(
  $color-values-dark: tokens.md-sys-color-values-dark()
) {
  @include color-scheme(
    _get-color-scheme-var-fallbacks($color-values-dark),
    $color-values-dark
  );
}

/// Declares set of CSS custom properties for baseline light color scheme
/// overrides.
@mixin light-color-scheme(
  $color-values-light: tokens.md-sys-color-values-light()
) {
  @include color-scheme(
    _get-color-scheme-var-fallbacks($color-values-light),
    $color-values-light
  );
}

$_baseline-color-scheme: tokens.md-sys-color-values-light();

/// Declares set of CSS custom properties for custom color scheme override.
/// @param {Map} $color-scheme - Map containing custom color scheme values.
/// @example
///   @include color-scheme((background: #f00));
///   // --md-sys-color-background: #f00;
///
///   @include color-scheme((background: var(--foo-custom-color, #f00));
///   // --md-sys-color-background: var(--foo-custom-color, #f00)
@mixin color-scheme(
  $color-scheme,
  $baseline-color-scheme: $_baseline-color-scheme,
  $prefix: var.create-name(sys-color)
) {
  $color-scheme: theme.validate-theme($baseline-color-scheme, $color-scheme);

  @each $key, $value in $color-scheme {
    #{$prefix}-#{$key}: #{$value};
    @include _declare-color-in-rgb($key, $value, $prefix);
  }
}

/// @param {Map} $color-scheme - Baseline color scheme map containing CSS vars
///     with fallback values.
/// @return {Map} - Returns a color scheme map with fallback values (concrete
///     color values) of provided CSS vars.
/// @example
///   _get-color-scheme-var-fallbacks((
///     background: var(--md-sys-color-background, #f00),
///   )
///   // (background: #f00)
@function _get-color-scheme-var-fallbacks($color-scheme) {
  @each $key, $value in $color-scheme {
    @if var.is-var($value) {
      $color-scheme: map.set($color-scheme, $key, var.fallback($value));
    }
  }

  @return $color-scheme;
}

// TODO(b/213331407): Following colors are set in rgb (comma separated format)
// to enable mixing with alpha value.
// (e.g., rgb(var(--foo-sys-color-on-surface-rgb, 31,31,31), 0.38))
// Remove once the attached bug is resolved.
@mixin _declare-color-in-rgb($color-key, $value, $prefix) {
  @if var.is-var($value) {
    $value: var.deep-fallback($value);
  }
  #{$prefix}-#{$color-key}-rgb: #{color.hex-to-rgb(#{$value})};
}
