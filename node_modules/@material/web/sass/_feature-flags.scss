//
// Copyright 2021 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

/// Valid configuration values for each config option.
$_valid-values: (
  // - all: var(--foo, var(--bar, 8px))
  // - none: var(--foo)
  // - vars: var(--foo, var(--bar))
  var-fallbacks: (all, none, vars)
);

/// Initial configuration for Sass options.
$_initial-config: (
  var-name-prefix: 'md',
  var-fallbacks: all,
);

/// The current configuration.
$_current-config: $_initial-config;

/// Set configuration options for Sass. Setting an option to `null` will reset
/// the option to its initial value.
///
/// The options will only be set within the scope of the content provided to the
/// mixin.
///
/// @example - scss
///   @include feature-flags.with($var-fallbacks: none) {
///     // No fallback values will be emitted within this mixin scope
///     @include another-mixin();
///   }
///
/// All parameters must be provided as argument lists.
///
/// @link https://sass-lang.com/documentation/values/lists#argument-lists
///
/// @throw If any option is not a valid configuration option.
/// @throw If any value is not a valid configuration option value.
/// @content The scope of the configuration.
/// @param {String} $var-name-prefix [md] - The prefix to use for custom
///     properties.
/// @param {String} $var-fallbacks [all] - What to emit for custom property
///     fallback values. (`all`, `none`, `vars`)
@mixin with($config...) {
  @if not meta.content-exists() {
    @error 'Content scope is required: feature-flags.with($options...) { /* scope */ }';
  }

  $config: meta.keywords($config);
  @each $option, $value in $config {
    @if $value == null {
      $value: map.get($_initial-config, $option);
    }

    $value: _validate-value($option, $value);
  }

  $previous-config: $_current-config;
  // Use !global to avoid shadowing
  // https://sass-lang.com/documentation/variables#shadowing
  $_current-config: map.merge($_current-config, $config) !global;
  // Restore previous config after content scope ends
  @content;
  $_current-config: $previous-config !global;
}

/// Retrieves the current configuration value for the given option.
///
/// @throw If the option is not a valid configuration option.
/// @param {String} option - The config option to get a value for.
/// @return {*} - The current value for the config option.
@function get($option) {
  $option: _validate-option($option);
  @return map.get($_current-config, $option);
}

/// Checks that an option is valid and returns it.
///
/// @throw If the option is not a valid configuration option.
/// @param {String} option - The option to check.
/// @return {String} The provided option.
@function _validate-option($option) {
  $valid-options: map.keys($_initial-config);
  @if list.index($valid-options, $option) == null {
    @error '"#{$option}" is not a valid configuration option';
  }

  @return $option;
}

/// Checks that an option and value are valid and returns the value.
///
/// @throw If any option is not a valid configuration option.
/// @throw If any value is not a valid configuration option value.
/// @param {String} option - The option to check.
/// @param {*} option - The value to check.
/// @return {*} - The provided value option.
@function _validate-value($option, $value) {
  $option: _validate-option($option);
  $valid-values: map.get($_valid-values, $option);
  @if $valid-values == null {
    // Any value is acceptable
    @return $value;
  }

  @if list.index($valid-values, $value) == null {
    @error '"#{$option}": "#{$value}" is not a valid configuration value (must be one of #{$valid-values})';
  }

  @return $value;
}
