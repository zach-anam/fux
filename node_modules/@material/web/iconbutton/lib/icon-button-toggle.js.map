{"version":3,"file":"icon-button-toggle.js","sourceRoot":"","sources":["icon-button-toggle.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,6BAA6B;AAC7B,mCAAmC;AAEnC,OAAO,2BAA2B,CAAC;AACnC,OAAO,oBAAoB,CAAC;AAC5B,OAAO,wBAAwB,CAAC;AAEhC,OAAO,EAAC,IAAI,EAAE,OAAO,EAAiB,MAAM,KAAK,CAAC;AAClD,OAAO,EAAC,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC3C,OAAO,EAAY,QAAQ,EAAC,MAAM,6BAA6B,CAAC;AAChE,OAAO,EAAC,IAAI,EAAC,MAAM,wBAAwB,CAAC;AAE5C,OAAO,EAAC,MAAM,EAAC,MAAM,2BAA2B,CAAC;AAEjD,OAAO,EAAC,UAAU,EAAC,MAAM,kBAAkB,CAAC;AAE5C;;;;;;GAMG;AACH,MAAM,OAAO,gBAAiB,SAAQ,UAAU;IAAhD;;QAME;;;;WAIG;QACuC,aAAQ,GAAG,KAAK,CAAC;IAkD7D,CAAC;IAhDoB,MAAM;QACvB,MAAM,mBAAmB,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,iBAAiB,CAAC;QACrE,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvE,MAAM,cAAc,GAAG,CAAC,mBAAmB,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACxB,IAAI,CAAC,SAAS,CAAC;QACnB,OAAO,IAAI,CAAA;mCACoB,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;0BAC1C,gBAAgB;wBAClB,cAAc,IAAI,OAAO;uBAC1B,IAAI,CAAC,QAAQ;oBAChB,IAAI,CAAC,WAAW;mBACjB,IAAI,CAAC,UAAU;0BACR,IAAI,CAAC,iBAAiB;oBAC5B,IAAI,CAAC,WAAW;YACxB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;UACxB,IAAI,CAAC,eAAe,EAAE;UACtB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC;UACxC,IAAI,CAAC,iBAAiB,EAAE;UACxB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,OAAO;UAC5C,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,OAAO;gBAC7C,CAAC;IACf,CAAC;IAES,kBAAkB;QAC1B,wEAAwE;QACxE,OAAO,IAAI,CAAA,iIAAiI,CAAC;IAC/I,CAAC;IAEkB,gBAAgB;QACjC,OAAO;YACL,GAAG,KAAK,CAAC,gBAAgB,EAAE;YAC3B,2BAA2B,EAAE,IAAI,CAAC,QAAQ;SAC3C,CAAC;IACJ,CAAC;IAES,WAAW;QACnB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO;SACR;QAED,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC/B,IAAI,CAAC,aAAa,CACd,IAAI,UAAU,CAAC,OAAO,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;QAC9D,0EAA0E;QAC1E,0DAA0D;QAC1D,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;IAC3D,CAAC;CACF;AAzD2B;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;;2DAA4B;AAOX;IAAzC,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;;kDAAkB","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Required for @ariaProperty\n// tslint:disable:no-new-decorators\n\nimport '../../focus/focus-ring.js';\nimport '../../icon/icon.js';\nimport '../../ripple/ripple.js';\n\nimport {html, nothing, TemplateResult} from 'lit';\nimport {property} from 'lit/decorators.js';\nimport {ClassInfo, classMap} from 'lit/directives/class-map.js';\nimport {when} from 'lit/directives/when.js';\n\nimport {ripple} from '../../ripple/directive.js';\n\nimport {IconButton} from './icon-button.js';\n\n/**\n * @fires change {Event}\n * Dispatched whenever `selected` is changed via user click\n *\n * @fires input {InputEvent}\n * Dispatched whenever `selected` is changed via user click\n */\nexport class IconButtonToggle extends IconButton {\n  /**\n   * The `aria-label` of the button when the toggle button is selected.\n   */\n  @property({type: String}) ariaLabelSelected!: string;\n\n  /**\n   * Sets the selected state. When false, displays the default icon. When true,\n   * displays the `selectedIcon`, or the default icon If no `selectedIcon` is\n   * provided.\n   */\n  @property({type: Boolean, reflect: true}) selected = false;\n\n  protected override render(): TemplateResult {\n    const hasToggledAriaLabel = this.ariaLabel && this.ariaLabelSelected;\n    const ariaPressedValue = hasToggledAriaLabel ? nothing : this.selected;\n    const ariaLabelValue = (hasToggledAriaLabel && this.selected) ?\n        this.ariaLabelSelected :\n        this.ariaLabel;\n    return html`<button\n          class=\"md3-icon-button ${classMap(this.getRenderClasses())}\"\n          aria-pressed=\"${ariaPressedValue}\"\n          aria-label=\"${ariaLabelValue || nothing}\"\n          ?disabled=\"${this.disabled}\"\n          @focus=\"${this.handleFocus}\"\n          @blur=\"${this.handleBlur}\"\n          @pointerdown=\"${this.handlePointerDown}\"\n          @click=\"${this.handleClick}\"\n          ${ripple(this.getRipple)}>\n        ${this.renderFocusRing()}\n        ${when(this.showRipple, this.renderRipple)}\n        ${this.renderTouchTarget()}\n        ${!this.selected ? this.renderIcon() : nothing}\n        ${this.selected ? this.renderSelectedIcon() : nothing}\n      </button>`;\n  }\n\n  protected renderSelectedIcon() {\n    // Use default slot as fallback to not require specifying multiple icons\n    return html`<md-icon class=\"md3-icon-button__icon md3-icon-button__icon--selected\"><slot name=\"selectedIcon\"><slot></slot></slot></md-icon>`;\n  }\n\n  protected override getRenderClasses(): ClassInfo {\n    return {\n      ...super.getRenderClasses(),\n      'md3-icon-button--selected': this.selected,\n    };\n  }\n\n  protected handleClick() {\n    if (this.disabled) {\n      return;\n    }\n\n    this.selected = !this.selected;\n    this.dispatchEvent(\n        new InputEvent('input', {bubbles: true, composed: true}));\n    // Bubbles but does not compose to mimic native browser <input> & <select>\n    // Additionally, native change event is not an InputEvent.\n    this.dispatchEvent(new Event('change', {bubbles: true}));\n  }\n}\n"]}